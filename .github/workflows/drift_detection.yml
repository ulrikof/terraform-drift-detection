name: Terraform Drift Detection and Handling

on:
  schedule:
    # Runs every 10 minutes for testing
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./  # Directory containing Terraform files

jobs:
  drift-detection:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Use your required Terraform version

      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      # Step 4: Run Terraform Plan
      - name: Terraform Plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan.binary || exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_ENV
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true

      # Step 5: Apply Changes if Drift Detected
      - name: Apply Changes (Drift Detected)
        if: env.exit_code == '2'
        run: terraform apply -auto-approve tfplan.binary
        working-directory: ${{ env.WORKING_DIR }}

      # Step 6: Log No Drift
      - name: Log No Drift
        if: env.exit_code == '0'
        run: echo "No drift detected. All resources are up-to-date."
